version: '3.8'

services:
  api:
    image: 127.0.0.1:5000/api
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      placement:
        constraints: [node.role == manager]
    depends_on:
     - db
    networks:
      - visual

  db:
    image: postgres
    deploy:
      restart_policy:
        condition: none
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d visual"]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - ./data:/var/lib/postgresql/data

    ports:
      - '5432:5432'
    networks:
      - visual

  frontend:
    image: 127.0.0.1:5000/frontend:latest
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    networks:
      - visual

  redis:
    image: redis
    deploy:
      restart_policy:
        condition: none
    ports:
      - '6379:6379'
    networks:
      - visual

  nginx:
    image: nginx:stable
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    ports:
      - mode: host
        protocol: tcp
        target: 80
        published: 80
    depends_on:
      - api
      - frontend
    networks:
      - visual

networks:
  visual:

volumes:
  data:
